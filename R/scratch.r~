## c:/Dropbox/RpackagesCreate/ggts/R/scratch.r

##    Chandler Lutz
##    Questions/comments: cl.eco@cbs.dk
##    $Revisions:      1.0.0     $Date:  2016-10-31

##to create some of the package information for ggts

library(devtools); library(roxygen2)

use_package("cowplot")
use_package("dplyr")
use_package("ggplot2", type = "Depends")
use_package("tidyr")
use_package("xts")
use_package("zoo")

devtools::use_testthat()


require(ggplot2)
library(lubridate)

##Create stat cycle that uses ggproto
##to crate a new stat that is going to calculate the cycle
GeomCycle <- ggplot2::ggproto(
    "GeomCycle",
    Stat, ##Really, GeomCycle is going to be a stat
          ##This makes it easier to add the regression bars
          ##using external data as x an y will be missing from
          ##the data used to compute the regression bars
    required_aes = c("x", "y"),
    compute_group = function(data, scales, dates) {
        ##Get the range for x -- this will be a numeric date
        x.rng <- range(data$x, na.rm = TRUE)

        ##convert the the dates to numerics to match
        ##how ggplot2 converts to numeric
        dates[, 1] <- as.numeric(dates[, 1])
        dates[, 2] <- as.numeric(dates[, 2])

        ##subset the dates
        ##Make sure that the dates are within the x and y range
        ##Check the start of the data compared to the end of each bear market
        ##Check the end of the data compared to the end of each bear market
        dates <- dates[dates[, 2] >= x.rng[1], ]
        dates <- dates[dates[, 2] <= x.rng[2], ]

        ##if the first date is below the range for x, update
        if (dates[1, 1] < x.rng[1]) {
            dates[1, 1] <- x.rng[1]
        }
        ##if the last date is higher than the range of x, update
        if (dates[nrow(dates), 2] > x.rng[2]) {
            dates[nrow(dates), 2] <- x.rng[2]
        }

        ##the dataframe we want to return
        d <- data.frame(xmin = dates[, 1], xmax = dates[, 2],
                        ymin = -Inf, ymax = Inf)
        print(d)

        return(d)
    }

)

##The stat cycle
geom_cycle <- function(dates = recession_dates, fill = "grey50", alpha = 0.2,
                       data = NULL, geom = "rect",
                       position = "identity", show.legend = FALSE, inherit.aes = TRUE,
                       ...) {
    ggplot2::layer(
        stat = GeomCycle,
        data = NULL,
        mapping = NULL,
        geom = geom,
        position = position,
        show.legend = show.legend,
        inherit.aes = inherit.aes,
        params = list(dates = dates,
                      fill = "grey50",
                      alpha = 0.2,
                      ...
                      )
    )
}


## ##The ggproto geom cycle -- use geom_annotate
## GeomCycle <- ggproto(
##     "GeomCycle",
##     GeomRect,
##     ##required_aes = c("x", "y"),
##     default_aes = aes(x = NULL, y = NULL, fill = "#003F87", alpha = 0.2)
## )

## ##The geom_cycle function
## geom_cycle <- function(mapping = NULL, data = NULL, stat = "cycle",
##                        position = "identity", show.legend = NA,
##                        inherit.aes = TRUE, na.rm = FALSE,
##                        dates = recession_dates, ...) {

##     layer(
##     geom = GeomCycle,
##     mapping = mapping,
##     data = data,
##     stat = stat,
##     position = position,
##     show.legend = show.legend,
##     inherit.aes = inherit.aes,
##     params = list(dates = dates,
##                   ...
##                   )
##   )
## }






## GeomCycle <- ggproto(
##     "GeomCycle",
##     Stat,
##     required_aes = c("x", "y"),

##     compute_group = function(data, scales, dates) {
##         x.rng <- range(data$x, na.rm = TRUE)
##         ##subset the dates
##         ##Make sure that the dates are within the x and y range
##         dates <- dates[dates[, 1] >= x.rng[1], ]
##         dates <- dates[dates[, 2] <= x.rng[2], ]

##         ##the dataframe we want to return
##         d <- data.frame(x = NA, y = NA,
##                         xmin = dates[, 1], xmax = dates[, 2],
##                         ymin = -Inf, ymax = Inf)
##         print(d)

##     }
## )

## geom_cycle <- function(mapping = NULL, data = NULL, geom = "rect",
##                        position = "identity", na.rm = FALSE, show.legend = NA,
##                        inherit.aes = FALSE, dates = recession_dates, ...) {
##     ggplot2::layer(
##         stat = GeomCycle,
##         data = data,
##         mapping = mapping,
##         geom = geom,
##         position = position,
##         show.legend = show.legend,
##         inherit.aes = inherit.aes,
##         params = list(dates = dates, ...)
##     )
## }








## geom_cycle <- function(dates = recession_dates, fill = "#003F87", alpha = 0.2, ...) {


##     names(dates) <- c("start", "end")

##     geom_rect(aes(x = NULL, y = NULL, group= NULL, xmin = start, xmax = end),
##                   ymin = -Inf, ymax = Inf, data = dates, fill = fill, alpha = alpha)
## }


