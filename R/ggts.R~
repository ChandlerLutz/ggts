ggts <-
function(data,variables=NULL,all=FALSE,standardize=FALSE,
                 dates=TRUE,names=NULL,bear=FALSE,recession=FALSE,
                 color=FALSE,palette=NULL,theme=theme_bw(),
                 filename=NULL,dpi=600) {
    #
    #
    # User-specified inputs:
    #    data --
    #    variables -- the variable(s) to be graphed. If set to NULL,
    #                the second element will be graphed. If all is
    #                set to TRUE, this item becomes meaningless
    #    all
    #    standardize -- set to TRUE to rescale varibles to have
    #                   zero mean an unit variance
    #    dates -- If the series contain dates. Default is set to True

    shade_color <- c("#003F87","grey50")

    if (is.null(palette)) {
        palette <- c("#000000", "#0072B2",  "#009E73", "#F0E442",
                     "#D55E00", "#CC79A7", "#56B4E9", "#E69F00")
    }


    if (!is.data.frame(data)) {

        if (!(class(data)[1] %in% c("ts","mts","zoo","xts"))) {
            stop("Data needs to be a dataframe, ts, mts, zoo, or xts object")
        }

        #Not a dataframe
        #turn into a dataframe
        if (dates) {
            if (class(data) == "ts" || class(data) == "mts")
                data <- as.ts.df(data)
            else
                data <- as.zoo.df(data)
        } else {
            data <- data.frame(time=time(data),data.frame(data))
        }

    }

    #Re-name the first column -- this should hold the dates
    names(data)[1] <- "time"

    #standardize if necessary
    if (standardize) {
        if (ncol(data) == 2) {
            data[,2] <- std(data[,2])
        } else {
            data[,2:ncol(data)] <- sapply(data[,2:ncol(data)],std)
        }
    }



    if (all) {
        #All variables will be graphed.
        #We have to remove the first column which is for the time
        variables <- names(data)[-1]
    } else if (is.null(variables)) {
        #If no variable is listed, grab the second element of the
        #data frame
        variables <- names(data)[2]
    }
    #The data should now be in a time series with a time column
    plot <- ggplot(data,aes(x=time))
    len <- length(variables)
    for (i in 1:len) {
        if (!is.null(names)) {
            #names is defined! Use it
            string <- paste('"',names[i],'"',sep="")
        } else {
            #names is not defined. use the variable
            #name for the linetype
            string <- paste('"',variables[[i]],'"',sep="")
        }

        if (color==TRUE) {
            plot <- plot +
                geom_line(aes_string(y=variables[[i]],
                                     colour=string,
                                     linetype=string)) #+
                                         #scale_colour_manual(values=palette)
        } else {
            plot <- plot +
                geom_line(aes_string(y=variables[[i]],
                                     linetype=string))
        }

    }
    plot <- plot + theme
    #Limit the x scale
    x_scale <- scale_x_date(lim=c(data$time[1],data$time[length(data$time)]))
    plot <- plot + x_scale + theme(axis.title.y=element_blank(),
                            legend.title=element_blank())
    rng <- c(min(data$time),max(data$time))
    if (bear && recession) {
        plot <- plot + shade(bear_dates,shade_color[1],xrng=rng)
        plot <- plot + shade(recession_dates,shade_color[2],xrng=rng)
    } else if (bear) {
        plot <- plot + shade(bear_dates,shade_color[1],xrng=rng)
    } else if (recession) {
        plot <- plot + shade(recession_dates,shade_color[1],xrng=rng)
    }

    if (!is.null(filename)) {
        #save the file
        ggsave(file=filename,plot=plot,dpi=dpi,width=7.82,
               height=4.66)
    }

    return(plot)
}
